name: install

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  pull_request:
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  workflow_dispatch:

env:
  MaaFw_tag: v4.0.0
  MFA_tag: v1.1.6
  app_name: MaaTOT
  icon_path: assets/logo.ico

permissions:
  contents: write
  actions: write

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)
          if [[ $tag != v* ]]; then
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ $tag != v* ]]; then
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}

  windows:
    needs: meta
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - arch: aarch64
            MFA-arch: arm64
            
          - arch: x86_64
            MFA-arch: x64
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Download MaaFramework
        uses: robinraju/release-downloader@v1
        with:
          repository: MaaXYZ/MaaFramework
          fileName: "MAA-win-${{ matrix.arch }}*"
          tag: "${{ env.MaaFw_tag }}"
          out-file-path: "deps"
          extract: true

      - name: Checkout MFAAvalonia Source
        uses: actions/checkout@v4
        with:
          repository: SweetSmellFox/MFAAvalonia
          ref: ${{ env.MFA_tag }}
          path: src

      - name: Replace Application Icon
        shell: bash
        run: |
          cp -f ${{ env.icon_path }} src/MFAAvalonia/Assets/logo.ico

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: 8.0.x
            config-file: NuGet.config

      - name: Restore Dependencies
        working-directory: src/MFAAvalonia
        run: dotnet restore --packages .nuget/packages
      
      - name: Build Solution
        working-directory: src/MFAAvalonia
        run: dotnet publish -c Release -r win-${{ matrix.MFA-arch }}

      - name: Install
        shell: bash
        run: python ./install.py ${{ needs.meta.outputs.tag }}

      - name: Copy MFAAvalonia and Rename
        shell: bash
        run: |
          BUILD_DIR="src/bin/AnyCPU/Release/win-${{ matrix.MFA-arch }}/publish"
          cp $BUILD_DIR/MFAAvalonia.exe $BUILD_DIR/MFAUpdater.exe $BUILD_DIR/MFAUpdater.dll $BUILD_DIR/MFAUpdater.runtimeconfig.json $BUILD_DIR/av_libglesv2.dll $BUILD_DIR/libHarfBuzzSharp.dll $BUILD_DIR/libonigwrap.dll $BUILD_DIR/libSkiaSharp.dll $BUILD_DIR/uiohook.dll install/
          jq --arg version_name "MaaTOT" --arg url ""https://github.com/Coxwtwo/MaaTOT"" --arg version ${{ needs.meta.outputs.tag }} '. + {"name": $version_name, "url": $url,"version": $version}' assets/interface.json > install/interface.json
          mv install/MFAAvalonia.exe install/${{ env.app_name }}.exe

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.app_name }}-win-${{ matrix.arch }}
          path: "install"

  # ubuntu:
  #   needs: meta
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       arch: [aarch64, x86_64]
  #     fail-fast: false

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Download MaaFramework
  #       uses: robinraju/release-downloader@v1
  #       with:
  #         repository: MaaXYZ/MaaFramework
  #         fileName: "MAA-linux-${{ matrix.arch }}*"
  #         tag: "${{ env.MaaFw_tag }}"
  #         out-file-path: "deps"
  #         extract: true

  #     - name: Install
  #       shell: bash
  #       run: |
  #         python ./install.py ${{ needs.meta.outputs.tag }}

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.app_name }}-linux-${{ matrix.arch }}
  #         path: "install"

  # macos:
  #   needs: meta
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       arch: [aarch64, x86_64]
  #     fail-fast: false

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Download MaaFramework
  #       uses: robinraju/release-downloader@v1
  #       with:
  #         repository: MaaXYZ/MaaFramework
  #         fileName: "MAA-macos-${{ matrix.arch }}*"
  #         tag: "${{ env.MaaFw_tag }}"
  #         out-file-path: "deps"
  #         extract: true

  #     - name: Install
  #       shell: bash
  #       run: |
  #         python ./install.py ${{ needs.meta.outputs.tag }}

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.app_name }}-macos-${{ matrix.arch }}
  #         path: "install"

  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    # needs: [meta, windows, ubuntu, macos]
    needs: [meta, windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: assets
      - run: |
          cd assets
          for f in *; do
            (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
          done
      - uses: softprops/action-gh-release@v2
        with:
          files: assets/*
          tag_name: ${{ needs.meta.outputs.tag }}
